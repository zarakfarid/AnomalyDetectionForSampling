///**
// * Autogenerated by Thrift Compiler (0.12.0)
// *
// * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// *  @generated
// */
//package com.eviac.blog.samples.thrift.server.test;
//
//import org.apache.thrift.TException;
//
//import io.jaegertracing.thriftjava.Batch;
//
//@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-11")
//public class AdditionService {
//
//  public interface Iface {
//
//    public void emitBatch(io.jaegertracing.thriftjava.Batch batch) throws org.apache.thrift.TException;
//
//  }
//
//  public interface AsyncIface {
//
//    public void emitBatch(io.jaegertracing.thriftjava.Batch batch, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;
//
//  }
//
//  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
//    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
//      public Factory() {}
//      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
//        return new Client(prot);
//      }
//      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//        return new Client(iprot, oprot);
//      }
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol prot)
//    {
//      super(prot, prot);
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//      super(iprot, oprot);
//    }
//
//    public void emitBatch(io.jaegertracing.thriftjava.Batch batch) throws org.apache.thrift.TException
//    {
//      send_emitBatch(batch);
//    }
//
//    public void send_emitBatch(io.jaegertracing.thriftjava.Batch batch) throws org.apache.thrift.TException
//    {
//      emitBatch_args args = new emitBatch_args();
//      args.setBatch(batch);
//      sendBaseOneway("emitBatch", args);
//    }
//
//  }
//  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
//    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
//      private org.apache.thrift.async.TAsyncClientManager clientManager;
//      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
//      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
//        this.clientManager = clientManager;
//        this.protocolFactory = protocolFactory;
//      }
//      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
//        return new AsyncClient(protocolFactory, clientManager, transport);
//      }
//    }
//
//    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
//      super(protocolFactory, clientManager, transport);
//    }
//
//    public void emitBatch(io.jaegertracing.thriftjava.Batch batch, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
//      checkReady();
//      emitBatch_call method_call = new emitBatch_call(batch, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class emitBatch_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
//      private io.jaegertracing.thriftjava.Batch batch;
//      public emitBatch_call(io.jaegertracing.thriftjava.Batch batch, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
//        super(client, protocolFactory, transport, resultHandler, true);
//        this.batch = batch;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("emitBatch", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
//        emitBatch_args args = new emitBatch_args();
//        args.setBatch(batch);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public Void getResult() throws org.apache.thrift.TException {
//        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
//          throw new java.lang.IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return null;
//      }
//    }
//
//  }
//
//  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
//    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
//    public Processor(I iface) {
//      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
//    }
//
//    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
//      processMap.put("emitBatch", new emitBatch());
//      return processMap;
//    }
//
//    public static class emitBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, emitBatch_args> {
//      public emitBatch() {
//        super("emitBatch");
//      }
//
//      public emitBatch_args getEmptyArgsInstance() {
//        return new emitBatch_args();
//      }
//
//      protected boolean isOneway() {
//        return true;
//      }
//
//      protected boolean rethrowUnhandledExceptions() {
//        return false;
//      }
//
//      public org.apache.thrift.TBase getResult(I iface, emitBatch_args args) throws org.apache.thrift.TException {
//        iface.emitBatch(args.batch);
//        return null;
//      }
//    }
//
//  }
//
//  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
//    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
//    public AsyncProcessor(I iface) {
//      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
//    }
//
//    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      processMap.put("emitBatch", new emitBatch());
//      return processMap;
//    }
//
//    public static class emitBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, emitBatch_args, Void> {
//      public emitBatch() {
//        super("emitBatch");
//      }
//
//      public emitBatch_args getEmptyArgsInstance() {
//        return new emitBatch_args();
//      }
//
//      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
//          public void onComplete(Void o) {
//          }
//          public void onError(java.lang.Exception e) {
//            if (e instanceof org.apache.thrift.transport.TTransportException) {
//              _LOGGER.error("TTransportException inside handler", e);
//              fb.close();
//            } else {
//              _LOGGER.error("Exception inside oneway handler", e);
//            }
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return true;
//      }
//
//      public void start(I iface, emitBatch_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
//        iface.emitBatch(args.batch,resultHandler);
//      }
//    }
//
//  }
//
//  public static class emitBatch_args implements org.apache.thrift.TBase<emitBatch_args, emitBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<emitBatch_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("emitBatch_args");
//
//    private static final org.apache.thrift.protocol.TField BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("batch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
//
//    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new emitBatch_argsStandardSchemeFactory();
//    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new emitBatch_argsTupleSchemeFactory();
//
//    public @org.apache.thrift.annotation.Nullable io.jaegertracing.thriftjava.Batch batch; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      BATCH((short)1, "batch");
//
//      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();
//
//      static {
//        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // BATCH
//            return BATCH;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByName(java.lang.String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final java.lang.String _fieldName;
//
//      _Fields(short thriftId, java.lang.String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public java.lang.String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.BATCH, new org.apache.thrift.meta_data.FieldMetaData("batch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
//          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, io.jaegertracing.thriftjava.Batch.class)));
//      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emitBatch_args.class, metaDataMap);
//    }
//
//    public emitBatch_args() {
//    }
//
//    public emitBatch_args(
//      io.jaegertracing.thriftjava.Batch batch)
//    {
//      this();
//      this.batch = batch;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public emitBatch_args(emitBatch_args other) {
//      if (other.isSetBatch()) {
//        this.batch = new io.jaegertracing.thriftjava.Batch(other.batch);
//      }
//    }
//
//    public emitBatch_args deepCopy() {
//      return new emitBatch_args(this);
//    }
//
//    public void clear() {
//      this.batch = null;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public io.jaegertracing.thriftjava.Batch getBatch() {
//      return this.batch;
//    }
//
//    public emitBatch_args setBatch(@org.apache.thrift.annotation.Nullable io.jaegertracing.thriftjava.Batch batch) {
//      this.batch = batch;
//      return this;
//    }
//
//    public void unsetBatch() {
//      this.batch = null;
//    }
//
//    /** Returns true if field batch is set (has been assigned a value) and false otherwise */
//    public boolean isSetBatch() {
//      return this.batch != null;
//    }
//
//    public void setBatchIsSet(boolean value) {
//      if (!value) {
//        this.batch = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
//      switch (field) {
//      case BATCH:
//        if (value == null) {
//          unsetBatch();
//        } else {
//          setBatch((io.jaegertracing.thriftjava.Batch)value);
//        }
//        break;
//
//      }
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public java.lang.Object getFieldValue(_Fields field) {
//      switch (field) {
//      case BATCH:
//        return getBatch();
//
//      }
//      throw new java.lang.IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new java.lang.IllegalArgumentException();
//      }
//
//      switch (field) {
//      case BATCH:
//        return isSetBatch();
//      }
//      throw new java.lang.IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(java.lang.Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof emitBatch_args)
//        return this.equals((emitBatch_args)that);
//      return false;
//    }
//
//    public boolean equals(emitBatch_args that) {
//      if (that == null)
//        return false;
//      if (this == that)
//        return true;
//
//      boolean this_present_batch = true && this.isSetBatch();
//      boolean that_present_batch = true && that.isSetBatch();
//      if (this_present_batch || that_present_batch) {
//        if (!(this_present_batch && that_present_batch))
//          return false;
//        if (!this.batch.equals(that.batch))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      int hashCode = 1;
//
//      hashCode = hashCode * 8191 + ((isSetBatch()) ? 131071 : 524287);
//      if (isSetBatch())
//        hashCode = hashCode * 8191 + batch.hashCode();
//
//      return hashCode;
//    }
//
//    public int compareTo(emitBatch_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = java.lang.Boolean.valueOf(isSetBatch()).compareTo(other.isSetBatch());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetBatch()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch, other.batch);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      scheme(iprot).read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      scheme(oprot).write(oprot, this);
//    }
//
//    @Override
//    public java.lang.String toString() {
//      java.lang.StringBuilder sb = new java.lang.StringBuilder("emitBatch_args(");
//      boolean first = true;
//
//      sb.append("batch:");
//      if (this.batch == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.batch);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//      if (batch != null) {
//        batch.validate();
//      }
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class emitBatch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public emitBatch_argsStandardScheme getScheme() {
//        return new emitBatch_argsStandardScheme();
//      }
//    }
//
//    private static class emitBatch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<emitBatch_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, emitBatch_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // BATCH
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
//                struct.batch = new io.jaegertracing.thriftjava.Batch();
//                struct.batch.read(iprot);
//                struct.setBatchIsSet(true);
//              } else { 
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, emitBatch_args struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.batch != null) {
//          oprot.writeFieldBegin(BATCH_FIELD_DESC);
//          struct.batch.write(oprot);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class emitBatch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public emitBatch_argsTupleScheme getScheme() {
//        return new emitBatch_argsTupleScheme();
//      }
//    }
//
//    private static class emitBatch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<emitBatch_args> {
//
//      public void write(org.apache.thrift.protocol.TProtocol prot, emitBatch_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        java.util.BitSet optionals = new java.util.BitSet();
//        if (struct.isSetBatch()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetBatch()) {
//          struct.batch.write(oprot);
//        }
//      }
//
//      public void read(org.apache.thrift.protocol.TProtocol prot, emitBatch_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        java.util.BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.batch = new io.jaegertracing.thriftjava.Batch();
//          struct.batch.read(iprot);
//          struct.setBatchIsSet(true);
//        }
//      }
//    }
//
//    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
//      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
//    }
//  }
//
//}
